from abc import ABC, abstractmethod

# 1Ô∏è‚É£ Definimos una abstracci√≥n (Interfaz)
class Coffee(ABC):
    @abstractmethod
    def prepare(self):
        pass

# 2Ô∏è‚É£ Definimos una sub-interfaz para caf√©s con leche
class MilkCoffee(Coffee, ABC):
    @abstractmethod
    def add_milk(self):
        pass

# 3Ô∏è‚É£ Implementaciones concretas de la abstracci√≥n
class Espresso(Coffee):
    def prepare(self):
        return "‚òï Preparando un Espresso..."

class Cappuccino(MilkCoffee):
    def prepare(self):
        return "‚òï Preparando un Cappuccino..."
    
    def add_milk(self):
        return "ü•õ A√±adiendo leche al Cappuccino..."

class Latte(MilkCoffee):
    def prepare(self):
        return "‚òï Preparando un Latte..."
    
    def add_milk(self):
        return "ü•õ A√±adiendo leche al Latte..."

# 4Ô∏è‚É£ CoffeeMachine depende de la abstracci√≥n
class CoffeeMachine:
    def __init__(self, coffee: Coffee):
        self.coffee = coffee  # ‚úÖ Inyecci√≥n de dependencias

    def prepare(self):
        print(self.coffee.prepare())

    def add_milk(self):
        if isinstance(self.coffee, MilkCoffee):
            print(self.coffee.add_milk())

# 5Ô∏è‚É£ Uso del c√≥digo con diferentes tipos de caf√©
if __name__ == "__main__":
    espresso = Espresso()
    cappuccino = Cappuccino()
    latte = Latte()

    print("---- M√°quina de Caf√© ----")

    machine1 = CoffeeMachine(espresso)
    machine1.prepare()  # ‚òï Preparando un Espresso...

    machine2 = CoffeeMachine(cappuccino)
    machine2.prepare()  # ‚òï Preparando un Cappuccino...
    machine2.add_milk() # ü•õ A√±adiendo leche al Cappuccino...

    machine3 = CoffeeMachine(latte)
    machine3.prepare()  # ‚òï Preparando un Latte...
    machine3.add_milk() # ü•õ A√±adiendo leche al Latte...

""" Este c√≥digo sigue SOLID correctamente:

SRP: Cada clase tiene una √∫nica responsabilidad.
OCP: Podemos agregar nuevos caf√©s sin modificar CoffeeMachine.
LSP: Espresso, Cappuccino y Latte pueden intercambiarse sin afectar el c√≥digo.
ISP: MilkCoffee solo lo implementan los caf√©s que realmente tienen leche.
DIP: CoffeeMachine depende de Coffee, no de implementaciones concretas. """